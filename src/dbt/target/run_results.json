{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.4", "generated_at": "2025-07-12T07:24:51.630428Z", "invocation_id": "374f7691-ee06-4fba-a0d0-869e2cad9035", "invocation_started_at": "2025-07-12T07:24:49.772898Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-12T07:24:51.189792Z", "completed_at": "2025-07-12T07:24:51.206469Z"}, {"name": "execute", "started_at": "2025-07-12T07:24:51.207782Z", "completed_at": "2025-07-12T07:24:51.319808Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13311123847961426, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.medical_dbt.dim_dates", "compiled": true, "compiled_code": "-- models/marts/dim_dates.sql\n\nWITH date_spine AS (\n    SELECT\n        GENERATE_SERIES(\n            '2023-01-01'::DATE,\n            CURRENT_DATE + INTERVAL '1 year',\n            '1 day'::INTERVAL\n        )::DATE AS date_day\n),\n\ndate_attributes AS (\n    SELECT\n        date_day,\n        EXTRACT(YEAR FROM date_day) AS year,\n        EXTRACT(MONTH FROM date_day) AS month,\n        TO_CHAR(date_day, 'Month') AS month_name,\n        EXTRACT(DAY FROM date_day) AS day_of_month,\n        EXTRACT(DOW FROM date_day) AS day_of_week, -- Sunday = 0, Saturday = 6\n        TO_CHAR(date_day, 'Day') AS day_name,\n        EXTRACT(DOY FROM date_day) AS day_of_year,\n        EXTRACT(WEEK FROM date_day) AS week_of_year,\n        EXTRACT(QUARTER FROM date_day) AS quarter_of_year,\n        TO_CHAR(date_day, 'YYYY-MM') AS year_month,\n        TO_CHAR(date_day, 'YYYY-MM-DD') AS full_date_string,\n        (CASE WHEN EXTRACT(DOW FROM date_day) IN (0, 6) THEN TRUE ELSE FALSE END) AS is_weekend\n    FROM date_spine\n)\n\nSELECT *\nFROM date_attributes", "relation_name": "\"medical_insights\".\"public\".\"dim_dates\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-12T07:24:51.333516Z", "completed_at": "2025-07-12T07:24:51.349151Z"}, {"name": "execute", "started_at": "2025-07-12T07:24:51.353387Z", "completed_at": "2025-07-12T07:24:51.425201Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09595203399658203, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.medical_dbt.stg_telegram_messages", "compiled": true, "compiled_code": "-- models/staging/stg_telegram_messages.sql\n\nWITH raw_messages AS (\n    SELECT\n        id,\n        channel_name,\n        message_id,\n        data AS raw_data,\n        scraped_at\n    FROM \"medical_insights\".\"raw\".\"telegram_messages\"\n),\n\ncleaned_messages AS (\n    SELECT\n        id,\n        channel_name,\n        message_id,\n        scraped_at,\n        raw_data->>'message' AS message_text,\n        (raw_data->>'date')::TIMESTAMP AS message_date,\n        (raw_data->>'views')::INT AS views_count,\n        (raw_data->>'forwards')::INT AS forwards_count,\n        (raw_data->'replies'->>'replies') AS replies_count, -- Fixed extraction for replies_count\n        (raw_data->>'reactions') IS NOT NULL AS has_reactions,\n        (raw_data->>'photo') IS NOT NULL AS has_photo,\n        -- Extract product mentions (placeholder regex - refine as needed)\n        REGEXP_MATCHES(raw_data->>'message', '(?i)(paracetamol|amoxicillin|ibuprofen|antibiotic|cream|pill)', 'g') AS product_mentions\n    FROM raw_messages\n    WHERE raw_data->>'message' IS NOT NULL OR raw_data->>'photo' IS NOT NULL\n)\n\nSELECT\n    id,\n    channel_name,\n    message_id,\n    message_text,\n    message_date,\n    COALESCE(views_count, 0) AS views_count,\n    COALESCE(forwards_count, 0) AS forwards_count,\n    COALESCE(replies_count::INT, 0) AS replies_count,\n    has_reactions,\n    has_photo,\n    product_mentions,\n    scraped_at\nFROM cleaned_messages", "relation_name": "\"medical_insights\".\"public\".\"stg_telegram_messages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-12T07:24:51.437573Z", "completed_at": "2025-07-12T07:24:51.451126Z"}, {"name": "execute", "started_at": "2025-07-12T07:24:51.452573Z", "completed_at": "2025-07-12T07:24:51.507665Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07370162010192871, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.medical_dbt.dim_channels", "compiled": true, "compiled_code": "-- models/marts/dim_channels.sql\n\nSELECT DISTINCT\n    channel_name,\n    MD5(channel_name) AS channel_sk -- Surrogate key for channel\nFROM \"medical_insights\".\"public\".\"stg_telegram_messages\"", "relation_name": "\"medical_insights\".\"public\".\"dim_channels\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-12T07:24:51.519922Z", "completed_at": "2025-07-12T07:24:51.535065Z"}, {"name": "execute", "started_at": "2025-07-12T07:24:51.536797Z", "completed_at": "2025-07-12T07:24:51.605420Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08940601348876953, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.medical_dbt.fct_messages", "compiled": true, "compiled_code": "-- models/marts/fct_messages.sql\n\nWITH stg_messages AS (\n    SELECT\n        id,\n        channel_name,\n        message_id,\n        message_text,\n        message_date,\n        views_count,\n        forwards_count,\n        replies_count,\n        has_reactions,\n        has_photo,\n        product_mentions,\n        scraped_at\n    FROM \"medical_insights\".\"public\".\"stg_telegram_messages\"\n),\n\nchannels AS (\n    SELECT\n        channel_name,\n        channel_sk\n    FROM \"medical_insights\".\"public\".\"dim_channels\"\n),\n\ndates AS (\n    SELECT\n        date_day,\n        year,\n        month,\n        day_of_month\n    FROM \"medical_insights\".\"public\".\"dim_dates\"\n)\n\nSELECT\n    sm.id AS message_pk,\n    sm.message_id,\n    sm.message_text,\n    LENGTH(sm.message_text) AS message_length,\n    sm.message_date,\n    sm.views_count,\n    sm.forwards_count,\n    sm.replies_count,\n    sm.has_reactions,\n    sm.has_photo,\n    sm.product_mentions,\n    sm.scraped_at,\n    c.channel_sk,\n    d.date_day AS message_date_key\nFROM stg_messages sm\nLEFT JOIN channels c ON sm.channel_name = c.channel_name\nLEFT JOIN dates d ON sm.message_date::DATE = d.date_day", "relation_name": "\"medical_insights\".\"public\".\"fct_messages\"", "batch_results": null}], "elapsed_time": 0.570547342300415, "args": {"cache_selected_only": false, "invocation_command": "dbt run --project-dir /app/src/dbt", "log_format_file": "debug", "require_all_warnings_handled_by_warn_error": false, "require_batched_execution_for_custom_microbatch_strategy": false, "show_resource_report": false, "log_file_max_bytes": 10485760, "state_modified_compare_more_unrendered_values": false, "require_nested_cumulative_type_params": false, "favor_state": false, "upload_to_artifacts_ingest_api": false, "indirect_selection": "eager", "log_level": "info", "require_resource_names_without_spaces": true, "project_dir": "/app/src/dbt", "write_json": true, "which": "run", "state_modified_compare_vars": false, "empty": false, "introspect": true, "quiet": false, "skip_nodes_if_on_run_start_fails": false, "partial_parse": true, "partial_parse_file_diff": true, "select": [], "log_level_file": "debug", "source_freshness_run_project_hooks": true, "printer_width": 80, "profiles_dir": "/root/.dbt", "require_yaml_configuration_for_mf_time_spines": false, "defer": false, "require_explicit_package_overrides_for_builtin_materializations": true, "validate_macro_args": false, "version_check": true, "macro_debugging": false, "use_colors": true, "send_anonymous_usage_stats": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "log_path": "/app/src/dbt/logs", "use_fast_test_edges": false, "use_colors_file": true, "log_format": "default", "static_parser": true, "print": true, "strict_mode": false, "vars": {}, "exclude": [], "populate_cache": true, "show_all_deprecations": false}}